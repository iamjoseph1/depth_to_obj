# def addPlanningScene_custom(output_path):

    # global count
    # global groub_name, planning_scene, robot
    
    # # Create a scene publisher to push changes to the scene //PlanningScene
    # scene_pub = rospy.Publisher('/move_group/monitored_planning_scene', PlanningScene, queue_size=3)
    
    # p = PlanningScene()
    # p.is_diff = True    
    # p.robot_state = robot.get_current_state()
    
    # # Give each of the scene objects a unique name        
    # object_id = 'object'

    # # Remove leftover objects from a previous run
    # planning_scene.remove_world_object(object_id)

    # pose_object = PoseStamped()
    # # pose_object.header.frame_id = "world"
    # pose_object.header.frame_id = robot.get_planning_frame()
    # pose_object.pose.position.x = 0.5
    # pose_object.pose.position.y = 0.5
    # pose_object.pose.position.z = 0.5
    # pose_object.pose.orientation.x = 0
    # pose_object.pose.orientation.y = 0
    # pose_object.pose.orientation.z = 0
    # pose_object.pose.orientation.w = 0

    # co = make_mesh_custom(object_id,pose_object,output_path)
    # print("collision object created")
    # planning_scene._PlanningSceneInterface__submit(co, attach=False)

    # scene_pub.publish(p)
    # count += 1

    # print("collision object visualized")

# def make_mesh_custom(object_id,pose_object,output_path):

    # co = CollisionObject()
    # meshfile = pyassimp.load(output_path)

    # co.operation = CollisionObject.ADD
    # co.id = object_id
    # co.header = pose_object.header
    # co.pose = pose_object.pose

    # mesh = Mesh()

    # first_face = meshfile.meshes[0].faces[0]
    # if hasattr(first_face, "__len__"):
    #     print("__len__")
    #     print("total faces : %d" % sum([len(mesh.faces) for mesh in meshfile.meshes]))
    #     for mesh_i in range(len(meshfile.meshes)):
    #         for face in meshfile.meshes[mesh_i].faces:
    #             if len(face) == 3:
    #                 triangle = MeshTriangle()
    #                 triangle.vertex_indices = [face[0], face[1], face[2]]
    #                 mesh.triangles.append(triangle)
    # elif hasattr(first_face, "indices"):
    #     print("indices")
    #     for mesh_i in range(len(meshfile.meshes)):
    #         for face in meshfile.meshes[mesh_i].faces:
    #             if len(face.indices) == 3:
    #                 triangle = MeshTriangle()
    #                 triangle.vertex_indices = [
    #                     face.indices[0],
    #                     face.indices[1],
    #                     face.indices[2],
    #                 ]
    #                 mesh.triangles.append(triangle)
    
    # scale = [1, 1, 1]

    # print("total vertices : %d" % sum([len(mesh.vertices) for mesh in meshfile.meshes]))
    # for mesh_i in range(len(meshfile.meshes)):
    #     for vertex in meshfile.meshes[mesh_i].vertices:
    #         point = Point()
    #         point.x = vertex[0] * scale[0]
    #         point.y = vertex[1] * scale[1]
    #         point.z = vertex[2] * scale[2]
    #         mesh.vertices.append(point)

    # co.meshes = [mesh]
    # pyassimp.release(meshfile)

    #  return co